@startuml

skinparam classAttributeIconSize 0

interface Steppable {
		+step(): void
}

abstract Recipe {		
		+craft(s: Settler): boolean
}

class RobotRecipe extends Recipe{
		+craft(s: Settler): boolean
}

RobotRecipe -[dashed]-> RobotResourceRegistry

class TeleportRecipe extends Recipe{
		+craft(s: Settler): boolean
}
TeleportRecipe -[dashed]-> TeleportResourceRegistry

abstract Material{
		+exposed(a: Asteroid): void
		+giveSignature(resReg: ResourceRegistry): void {abstract}
}

Material-[dashed]->ResourceRegistry


class Iron extends Material{ 
		+giveSignature(resReg: ResourceRegistry): void
}


class Ice extends Material {
		+giveSignature(resReg: ResourceRegistry): void
		+exposed(a: Asteroid): void
}


class Coal extends Material {
		+giveSignature(resReg: ResourceRegistry): void
}

class Uranium extends Material {
        -exposedCount: int
		+exposed(a: Asteroid): void
		+giveSignature(resReg: ResourceRegistry): void
}

enum MaterialName  <<enumeration>> {
		IRON
		ICE
		COAL
		URANIUM
}
hide MaterialName methods

Material --> "1 -name" MaterialName




abstract class Transporter {
		+acceptWorker(w: Worker): boolean {abstract}
		+removeWorker(w: Worker): void {abstract}
        +removeNeighbor(t: Transporter): void {abstract}
        +sufferSolarstorm(depth: int,hit: AsteroidRegistry):void {abstract}
}


'interface TeleportHolder{
'		+removeTeleport(t: Teleport): void
'		+acceptTeleport(t: Teleport): boolean
'}



class Teleport extends Transporter implements Steppable {
		-crazy: boolean
		+moveWorker(w: Worker): boolean
		+acceptWorker(w: Worker): boolean
		+removeWorker(w: Worker): void
		+removeNeighbor(t: Transporter): void
        +destroy(): void
        +place(a: Asteroid): void
        +isPlaced(): boolean
		+moveToNegihbor(): void
		+sufferSolarstorm(depth: int,hit: AsteroidRegistry):void
		+step(): void
}
Teleport --> "1 -pair" Teleport
Teleport --> "0..1 -asteroid" Asteroid
Teleport --> "0..1 -holder" Settler


class Asteroid extends Transporter implements Steppable {
		-sunDistance: int
		-sunclose: boolean
		-layer: int
		-layersDrilled: int
		+acceptWorker(w: Worker): boolean
		+removeWorker(w: Worker): void
		+explode(): void
		+isExposed(): boolean
		+sufferSolarstorm(depth: int,hit: AsteroidRegistry):void
		+drilled():void
		+mined(i: Inventory): boolean
		+acceptMaterial(m: Material): boolean
		+removeMaterial(): void
		+addNeighbor(t: Transporter): boolean
		+removeNeighbor(t: Transporter): void
		+onNeighborDestroyed(t: Transporter): void
        +checkBaseWin(): boolean
        +step(): void
}

Asteroid o-- "0..1 -core" Material
Asteroid o-- "0..* -workers" Worker
Asteroid --> "0..* -neighbors" Transporter

Inventory *-- "0..* -materials" Material
abstract Inventory{
		+isFull():boolean {abstract}
		+addMaterial(m Material):boolean
		+removeMaterial(m: Material):void
}

Settler *-- "1 -inventory" SettlerInventory
class SettlerInventory implements Inventory{
		+isFull():boolean
}

UnidentifiedFlyingObject *-- "1 -inventory" UFOInventory
class UFOInventory implements Inventory{
		+isFull():boolean
}

Robot *-- "1 -inventory" BlankInventory
UnidentifiedFlyingObject ..> BlankInventory
class BlankInventory implements Inventory{
		+isFull():boolean
}

abstract class Worker implements Steppable {
		+die(): void {abstract} 
		+move(t: Transporter): void
		+explode(): void {abstract} 
		+drill(): void
		+getInventory(): Inventory
}
Worker -[dashed]-> Inventory


Worker --> "1 -asteroid" Asteroid


class Settler extends Worker {
		+step(): void
		+die(): void
		+explode(): void
		+mine(): boolean
		+acceptTeleport(t: Teleport): boolean
		+removeTeleport(t: Teleport): void
		+isInventoryFull(): boolean
		+craft(r: Recipe): boolean
        +placeMaterial(m: Material): boolean
	    +placeTeleport(): boolean
        +getTeleportSize(): int
	    +getInventory(): Inventory
}


Settler *-- "<<static>> 0..* -recipes" Recipe
'^static
Settler --> "0..3 -teleport" Teleport

class Robot extends Worker{
        +explode(): void
        +step(): void
        +die(): void
}

class UnidentifiedFlyingObject extends Worker {
	    +explode(): void
        +step(): void
        +die(): void
}



AsteroidField *-- "1..* -asteroids" Asteroid
class AsteroidField implements Steppable{
		+induceSolarStorm(): void
		+step(): void
}
Asteroid-[dashed]->AsteroidRegistry
AsteroidRegistry o-right- "0..* -asteroids" Asteroid
class AsteroidRegistry {
		+register(a: Asteroid): void
		+contains(a: Asteroid): boolean
}


class Game << (S,#FF7700) Singleton >> {
		+round(): void
        +endGame(b: boolean)
        +removeSteppable(s: Steppable): void
        +removeSettler(s: Settler): void
        +addSettler(s: Settler): void
        +addSteppable(s: Steppable): void
        +checkAsteroidWin(a: Asteroid): void
}

Game *-- "0..* -steppables" Steppable
Game *-- "0..* -players" Settler
Game *-- "1 -field" AsteroidField

abstract class ResourceRegistry {
		+register(i: Inventory): void
		+register(m: Iron): void
		+register(m: Ice): void
		+register(m: Coal): void
		+register(m: Uranium): void
		+isSuccessful(): boolean
		+removeRequiredMaterials(inv: Inventory): void {abstract}
}
class RobotResourceRegistry extends ResourceRegistry{
		+register(m: Iron): void
		+register(m: Coal): void
		+register(m: Uranium): void
		+removeRequiredMaterials(inv: Inventory): void
}
class TeleportResourceRegistry extends ResourceRegistry{
	    +register(m: Iron): void
		+register(m: Ice): void
		+register(m: Uranium): void
		+removeRequiredMaterials(inv: Inventory): void
}
class BaseResourceRegistry extends ResourceRegistry{
		+register(m: Iron): void
		+register(m: Ice): void
		+register(m: Coal): void
		+register(m: Uranium): void
		+removeRequiredMaterials(inv: Inventory): void
}
ResourceRegistry -[dashed]-> Iron
ResourceRegistry -[dashed]-> Ice
ResourceRegistry -[dashed]-> Coal
ResourceRegistry -[dashed]-> Uranium
ResourceRegistry -[dashed]-> MaterialName
ResourceRegistry -[dashed]-> Inventory
Asteroid -[dashed]-> BaseResourceRegistry
'
@enduml
